---
import Layout from '../layouts/Layout.astro';
import Header from '../components/layout/Header.astro';
import Sidebar from '../components/layout/Sidebar.astro';
import SearchBar from '../components/search/SearchBar.astro';
import AirfoilGrid from '../components/airfoil/AirfoilGrid.astro';
import ComparisonBanner from '../components/comparison/ComparisonBanner.astro';
import ComparisonModal from '../components/comparison/ComparisonModal.astro';
import airfoils from '../data/airfoils.json';

// In a real implementation, you would process the airfoil data to extract these values
const camberRanges = [
  "0-2%", 
  "2-4%", 
  "4-6%", 
  "6-8%", 
  "8-10%", 
  "10%+"
];

const thicknessRanges = [
  "0-5%", 
  "5-10%", 
  "10-15%", 
  "15-20%", 
  "20%+"
];

const applications = [
  "UAV",
  "General Aviation",
  "Glider",
  "High-lift",
  "Supersonic",
  "Model Aircraft"
];

// Get recently viewed from localStorage in client script
// Get favorites from localStorage in client script
// Calculate popular airfoils based on most common in the dataset
const popularAirfoils = Object.entries(airfoils)
  .slice(0, 5)
  .map(([id, airfoil]) => ({ id, name: airfoil.name }));
---

<Layout title="AeroFoilPro - Airfoil Database">
  <div class="flex w-full bg-gray-50 min-h-screen">
    <!-- Left Banner Ad -->
    <aside class="hidden xl:flex w-48 items-center justify-center px-4">
      <div class="w-48 h-96 bg-gray-200 rounded-lg flex items-center justify-center text-gray-500 text-lg font-semibold">
        Ad
      </div>
    </aside>

    <!-- Main Content Area -->
    <div class="flex flex-1 mt-8">
      <div class="flex w-full">
        <Sidebar popularAirfoils={popularAirfoils} applications={applications} />
        <main class="flex-1 pl-4">
          <div class="max-w-7xl mx-auto">
            <div class="mb-6">
              <h1 class="text-3xl font-bold text-gray-900">
                Airfoil Database
              </h1>
              <p class="mt-2 text-gray-600">
                Search and compare airfoils for your next project
              </p>
            </div>
            <SearchBar camberRanges={camberRanges} thicknessRanges={thicknessRanges} applications={applications} />
            <div class="mt-6">
              <AirfoilGrid airfoils={airfoils} />
            </div>
          </div>
        </main>
      </div>
    </div>

    <!-- Right Banner Ad -->
    <aside class="hidden xl:flex w-48 items-center justify-center px-4">
      <div class="w-48 h-96 bg-gray-200 rounded-lg flex items-center justify-center text-gray-500 text-lg font-semibold">
        Ad
      </div>
    </aside>
  </div>

  <ComparisonBanner />
  <ComparisonModal />

  <!-- Error container -->
  <div id="errorContainer" class="fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded hidden" role="alert">
  </div>
</Layout>

<script>
  import { App } from '../scripts/app.js';
</script>

<script>
function waitForStorageAndDOM(callback) {
  if (
    window.storage &&
    document.getElementById('recentlyViewed') &&
    document.getElementById('favorites')
  ) {
    console.log("window.storage and DOM elements are ready");
    callback();
  } else {
    setTimeout(() => waitForStorageAndDOM(callback), 50);
  }
}

function updateRecentlyViewedSidebar() {
  console.log("updateRecentlyViewedSidebar called");
  const recent = window.storage.get('recentlyViewed');
  console.log("recentlyViewed:", recent);
  const recentlyViewedList = document.getElementById('recentlyViewed');
  if (recentlyViewedList) {
    recentlyViewedList.innerHTML = '';
    if (recent.length === 0) {
      recentlyViewedList.innerHTML = '<li class="pl-2 text-gray-700">No recently viewed airfoils.</li>';
    } else {
      recent.forEach(airfoil => {
        recentlyViewedList.innerHTML += `
          <li class="pl-2 text-gray-700">
            <a href="/airfoil/${airfoil.id}" class="hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded">
              ${airfoil.name}
            </a>
          </li>
        `;
      });
    }
  }
}

function updateFavoritesSidebar() {
  console.log("updateFavoritesSidebar called");
  const favorites = window.storage.get('favorites');
  console.log("favorites:", favorites);
  const favoritesList = document.getElementById('favorites');
  if (favoritesList) {
    favoritesList.innerHTML = '';
    if (favorites.length === 0) {
      favoritesList.innerHTML = '<li class="pl-2 text-gray-700">No favorites yet.</li>';
    } else {
      favorites.forEach(airfoil => {
        favoritesList.innerHTML += `<li class='pl-2 text-gray-700'>${airfoil.name}</li>`;
      });
    }
  }
}

document.addEventListener('DOMContentLoaded', () => {
  waitForStorageAndDOM(() => {
    updateRecentlyViewedSidebar();
    updateFavoritesSidebar();
  });
});
</script>

<script>
function waitForStorageAndFavoriteButtons(callback) {
  if (
    window.storage &&
    document.querySelectorAll('.favorite-btn').length > 0
  ) {
    callback();
  } else {
    setTimeout(() => waitForStorageAndFavoriteButtons(callback), 50);
  }
}

function updateFavoriteIcon(btn, isFav) {
  const svg = btn.querySelector('svg');
  if (svg) {
    svg.setAttribute('fill', isFav ? 'red' : 'none');
    btn.classList.toggle('text-red-500', isFav);
    btn.classList.toggle('text-gray-400', !isFav);
  }
}

function updateFavoritesSidebar() {
  const favorites = window.storage.get('favorites');
  const favoritesList = document.getElementById('favorites');
  if (favoritesList) {
    favoritesList.innerHTML = '';
    if (favorites.length === 0) {
      favoritesList.innerHTML = '<li class="pl-2 text-gray-700">No favorites yet.</li>';
    } else {
      favorites.forEach(airfoil => {
        favoritesList.innerHTML += `<li class='pl-2 text-gray-700'>${airfoil.name}</li>`;
      });
    }
  }
}

document.addEventListener('DOMContentLoaded', () => {
  waitForStorageAndFavoriteButtons(() => {
    document.querySelectorAll('.favorite-btn').forEach(btn => {
      const id = btn.getAttribute('data-id');
      const isFav = window.storage.isFavorite(id);
      updateFavoriteIcon(btn, isFav);

      btn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        const card = btn.closest('.airfoil-card');
        const name = card?.getAttribute('data-name') || '';
        const description = card?.getAttribute('data-description') || '';
        const airfoil = { id, name, description };
        const newFav = window.storage.toggleFavorite(airfoil);
        updateFavoriteIcon(btn, newFav);
        updateFavoritesSidebar();
      });
    });
    updateFavoritesSidebar();
  });
});
</script>
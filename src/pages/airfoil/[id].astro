---
import Layout from '../../layouts/Layout.astro';
import Sidebar from '../../components/layout/Sidebar.astro';
import AirfoilBanner from '../../components/airfoil/AirfoilBanner.astro';
import AirfoilTabs from '../../components/airfoil/AirfoilTabs.astro';
import AirfoilTabContents from '../../components/airfoil/AirfoilTabContents.astro';
import MetadataCard from '../../components/airfoil/MetadataCard.astro';
import WingletConfigCard from '../../components/airfoil/WingletConfigCard.astro';
import CoordinateDataCard from '../../components/airfoil/CoordinateDataCard.astro';
import Model3DCard from '../../components/airfoil/Model3DCard.astro';
import PerformanceCard from '../../components/airfoil/PerformanceCard.astro';
import DragPolarCard from '../../components/airfoil/DragPolarCard.astro';
import StructuralPropertiesCard from '../../components/airfoil/StructuralPropertiesCard.astro';
import airfoils from '../../data/airfoils.json';

export const prerender = true;
export async function getStaticPaths() {
  return Object.keys(airfoils).map((id) => ({ params: { id } }));
}
const { id } = Astro.params;
const airfoil = airfoils[id];
if (!airfoil) {
  throw new Error(`Airfoil not found for ID: ${id}`);
}
// Extract airfoil family, camber and thickness from name (for NACA airfoils)
let airfoilFamily = 'Unknown';
let camber = '0';
let camberPosition = '0';
let thickness = '12';
if (airfoil.name.startsWith('NACA')) {
  airfoilFamily = 'NACA';
  
  // For 4-digit NACA airfoils
  if (airfoil.name.slice(5).length === 4) {
    camber = airfoil.name.slice(5, 6);
    camberPosition = airfoil.name.slice(6, 7);
    thickness = airfoil.name.slice(7, 9);
  }
}
// Sidebar props
const applications = [
  "UAV",
  "General Aviation",
  "Glider",
  "High-lift",
  "Supersonic",
  "Model Aircraft"
];
const popularAirfoils = Object.entries(airfoils)
  .slice(0, 5)
  .map(([id, airfoil]) => ({ id, name: airfoil.name }));
---
<Layout title={`${airfoil.name} - AeroFoilPro`}>
  <div class="flex w-full">
    <Sidebar popularAirfoils={popularAirfoils} applications={applications} />
    <main class="flex-1 pl-4">
      <div class="max-w-7xl mx-auto">
        <AirfoilBanner name={airfoil.name} description={airfoil.description} />
        <AirfoilTabs />
        <AirfoilTabContents airfoil={airfoil} />
      </div>
    </main>
  </div>

  <!-- Inject airfoil data as a global variable, as a JSON string, and parse it in the browser -->
  <script is:inline define:vars={{ id, airfoil }}>
    window.currentAirfoilData = {
      id: id,
      name: airfoil.name,
      description: airfoil.description || "",
      coordinates: airfoil.coordinates || []
    };
    const airfoilData = window.currentAirfoilData;
    console.log('[DEBUG] window.currentAirfoilData:', window.currentAirfoilData);
  </script>

  <script is:inline>
    function waitForStorage(callback) {
      if (window.storage) {
        callback();
      } else {
        setTimeout(() => waitForStorage(callback), 50);
      }
    }

    const airfoilData = window.currentAirfoilData;
    console.log('[DEBUG] airfoilData used for Recently Viewed:', airfoilData);

    waitForStorage(() => {
      window.storage.addToRecentlyViewed(airfoilData);
      updateRecentlyViewedSidebar();
    });

    function updateRecentlyViewedSidebar() {
      const recent = window.storage.get('recentlyViewed');
      console.log('[DEBUG] recentlyViewed from storage:', recent);
      const recentlyViewedList = document.getElementById('recentlyViewed');
      if (recentlyViewedList) {
        recentlyViewedList.innerHTML = '';
        if (recent.length === 0) {
          recentlyViewedList.innerHTML = '<li class="pl-2 text-gray-700">No recently viewed airfoils.</li>';
        } else {
          recent.forEach(airfoil => {
            recentlyViewedList.innerHTML += `
              <li class="pl-2 text-gray-700">
                <a href="/airfoil/${airfoil.id}" class="hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded">
                  ${airfoil.name}
                </a>
              </li>
            `;
          });
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      waitForStorage(updateRecentlyViewedSidebar);
    });
  </script>
</Layout>
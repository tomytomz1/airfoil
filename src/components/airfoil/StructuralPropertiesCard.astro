---
export interface Props {
  name: string;
}

const { name } = Astro.props;

// Sample structural data - in a real implementation, this would come from your data source
const structuralData = {
  area: 0.0749,
  centroidX: 0.4162,
  centroidY: 0.0024,
  inertiaIxx: 0.0041,
  inertiaIyy: 0.0128,
  inertiaIxy: -0.0001,
  maxThickness: 0.12,
  maxThicknessLocation: 0.3,
  trailingEdgeAngle: 12,
  leadingEdgeRadius: 0.016
};
---

<div class="bg-white rounded-lg shadow-sm mb-6" id="structural-content">
  <div class="p-4 border-b border-gray-200">
    <h2 class="text-lg font-medium text-gray-900">Structural Properties</h2>
  </div>
  
  <div class="p-4 grid grid-cols-1 md:grid-cols-3 gap-6">
    <!-- Section 1: Cross-Section Properties -->
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-3">Cross-Section Properties</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <dl class="space-y-2">
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Area:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.area.toFixed(4)}</dd>
          </div>
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Centroid X:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.centroidX.toFixed(4)}</dd>
          </div>
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Centroid Y:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.centroidY.toFixed(4)}</dd>
          </div>
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Moment of Inertia Ixx:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.inertiaIxx.toFixed(4)}</dd>
          </div>
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Moment of Inertia Iyy:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.inertiaIyy.toFixed(4)}</dd>
          </div>
          <div class="flex justify-between">
            <dt class="text-xs text-gray-500">Product of Inertia Ixy:</dt>
            <dd class="text-sm font-medium text-gray-900">{structuralData.inertiaIxy.toFixed(4)}</dd>
          </div>
        </dl>
      </div>
    </div>
    
    <!-- Section 2: Thickness Visualization -->
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-3">Thickness Distribution</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-3 h-64">
        <canvas id="thicknessChart" class="w-full h-full"></canvas>
      </div>
    </div>
    
    <!-- Section 3: Structural Considerations -->
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-3">Manufacturing Considerations</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 text-sm text-gray-600 space-y-3">
        <p>
          The {name} airfoil has a maximum thickness of {(structuralData.maxThickness * 100).toFixed(1)}% 
          at {(structuralData.maxThicknessLocation * 100).toFixed(1)}% chord, providing moderate structural depth 
          for internal components.
        </p>
        <p>
          With a trailing edge angle of {structuralData.trailingEdgeAngle}Â°, this airfoil offers a balance 
          between structural integrity and aerodynamic performance at the trailing edge.
        </p>
        <p>
          The leading edge radius of {(structuralData.leadingEdgeRadius * 100).toFixed(1)}% chord allows for 
          reasonable protection against minor impacts while maintaining good low-speed performance.
        </p>
        <p>
          This airfoil is suitable for conventional manufacturing methods including CNC machining, 
          composite layup, and extrusion processes.
        </p>
      </div>
    </div>
  </div>
  
  <!-- Additional Sections -->
  <div class="px-4 pb-4 grid grid-cols-1 md:grid-cols-2 gap-6 mt-2">
    <!-- Material Options -->
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-3">Recommended Materials</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div class="grid grid-cols-1 gap-3">
          <div class="flex items-start">
            <div class="flex-shrink-0 h-5 w-5 relative mt-1">
              <span class="absolute h-4 w-4 bg-blue-600 rounded-full"></span>
            </div>
            <div class="ml-3">
              <h4 class="text-sm font-medium text-gray-700">Aluminum Alloy 6061-T6</h4>
              <p class="text-xs text-gray-500">
                Good strength-to-weight ratio, excellent machinability, and corrosion resistance. 
                Suitable for general aviation applications.
              </p>
            </div>
          </div>
          <div class="flex items-start">
            <div class="flex-shrink-0 h-5 w-5 relative mt-1">
              <span class="absolute h-4 w-4 bg-green-600 rounded-full"></span>
            </div>
            <div class="ml-3">
              <h4 class="text-sm font-medium text-gray-700">Carbon Fiber Composite</h4>
              <p class="text-xs text-gray-500">
                Superior strength-to-weight ratio and stiffness. Ideal for high-performance 
                applications where weight reduction is critical.
              </p>
            </div>
          </div>
          <div class="flex items-start">
            <div class="flex-shrink-0 h-5 w-5 relative mt-1">
              <span class="absolute h-4 w-4 bg-yellow-500 rounded-full"></span>
            </div>
            <div class="ml-3">
              <h4 class="text-sm font-medium text-gray-700">Polystyrene Foam Core</h4>
              <p class="text-xs text-gray-500">
                Lightweight and easy to shape, suitable for model aircraft applications or as 
                core material with composite skin.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Spar Locations -->
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-3">Recommended Spar Locations</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-3 h-64">
        <canvas id="sparLocationChart" class="w-full h-full"></canvas>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Sample data for thickness distribution chart
    const thicknessData = {
      chordPositions: [0, 0.005, 0.0125, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0],
      thickness: [0, 0.0176, 0.0245, 0.0349, 0.0474, 0.0566, 0.0631, 0.0708, 0.0747, 0.0757, 0.0758, 0.0708, 0.0620, 0.0512, 0.0390, 0.0261, 0.0130, 0.0065, 0]
    };
    
    // Sample data for spar location chart
    const sparData = {
      chordPositions: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
      upperSurface: [0, 0.0563, 0.0726, 0.0788, 0.0780, 0.0724, 0.0636, 0.0518, 0.0375, 0.0208, 0],
      lowerSurface: [0, -0.0375, -0.0423, -0.0412, -0.0380, -0.0334, -0.0276, -0.0214, -0.0150, -0.0082, 0],
      sparPositions: [
        { position: 0.25, label: 'Front Spar', color: 'rgba(34, 197, 94, 0.8)' },
        { position: 0.7, label: 'Rear Spar', color: 'rgba(59, 130, 246, 0.8)' }
      ]
    };
    
    // Create Thickness Distribution Chart
    const createThicknessChart = () => {
      const ctx = document.getElementById('thicknessChart');
      if (!ctx || !(ctx instanceof HTMLCanvasElement)) return;
      
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: thicknessData.chordPositions.map(pos => (pos * 100).toFixed(0) + '%'),
          datasets: [{
            label: 'Thickness',
            data: thicknessData.thickness.map(t => t * 100), // Convert to percentage
            borderColor: '#3b82f6',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 2,
            fill: true,
            tension: 0.3
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              title: {
                display: true,
                text: 'Chord Position (x/c)'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Thickness (% chord)'
              },
              min: 0
            }
          }
        }
      });
    };
    
    // Create Spar Location Chart
    const createSparLocationChart = () => {
      const ctx = document.getElementById('sparLocationChart');
      if (!ctx || !(ctx instanceof HTMLCanvasElement)) return;
      
      const chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: sparData.chordPositions.map(pos => (pos * 100).toFixed(0) + '%'),
          datasets: [
            {
              label: 'Upper Surface',
              data: sparData.upperSurface,
              borderColor: '#3b82f6',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              borderWidth: 2,
              fill: 1,
              tension: 0.3
            },
            {
              label: 'Lower Surface',
              data: sparData.lowerSurface,
              borderColor: '#3b82f6',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              borderWidth: 2,
              fill: false,
              tension: 0.3
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              title: {
                display: true,
                text: 'Chord Position (x/c)'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Position (y/c)'
              }
            }
          }
        }
      });
      
      // Add spar annotations after chart is created
      sparData.sparPositions.forEach(spar => {
        // Find x-coordinate in canvas space
        const xScale = chart.scales.x;
        const yScale = chart.scales.y;
        
        // Calculate the index closest to our spar position
        const xPosIndex = Math.round(spar.position * (sparData.chordPositions.length - 1));
        const xPos = spar.position;
        
        // Draw vertical line for spar
        const upperY = sparData.upperSurface[xPosIndex];
        const lowerY = sparData.lowerSurface[xPosIndex];
        
        chart.data.datasets.push({
          label: spar.label,
          data: [
            { x: xPos, y: lowerY },
            { x: xPos, y: upperY }
          ],
          borderColor: spar.color,
          backgroundColor: spar.color,
          borderWidth: 4,
          borderDash: [5, 5],
          pointRadius: 0,
          showLine: true
        });
      });
      
      chart.update();
    };
    
    // Initialize charts
    createThicknessChart();
    createSparLocationChart();
  });
</script>
---
export interface Props {
  airfoilName: string;
}

const { airfoilName } = Astro.props;
---

<div class="bg-white rounded-lg shadow-sm mb-6">
  <div class="p-4 border-b border-gray-200">
    <h2 class="text-lg font-medium text-gray-900">Winglet Configuration</h2>
  </div>
  
  <div class="p-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Winglet Visualization -->
      <div>
        <div class="mb-4">
          <h3 class="text-sm font-medium text-gray-700 mb-2">Winglet Preview</h3>
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-2 h-80 relative">
            <div id="wingletPreview" class="w-full h-full">
              <!-- Placeholder content until Three.js loads -->
              <div class="flex items-center justify-center h-full text-gray-400">
                <div class="text-center">
                  <svg class="w-16 h-16 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5"></path>
                  </svg>
                  <p>Loading 3D winglet preview...</p>
                </div>
              </div>
            </div>
            
            <!-- View Controls -->
            <div class="absolute top-3 right-3 flex space-x-1">
              <button id="viewTop" class="bg-white text-gray-700 p-1 rounded border border-gray-300 hover:bg-gray-100" title="Top View">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
              </button>
              <button id="viewSide" class="bg-white text-gray-700 p-1 rounded border border-gray-300 hover:bg-gray-100" title="Side View">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
              <button id="viewFront" class="bg-white text-gray-700 p-1 rounded border border-gray-300 hover:bg-gray-100" title="Front View">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              <button id="viewIso" class="bg-white text-gray-700 p-1 rounded border border-gray-300 hover:bg-gray-100" title="Isometric View">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Winglet Controls -->
      <div>
        <h3 class="text-sm font-medium text-gray-700 mb-3">Winglet Parameters</h3>
        <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
          <!-- Winglet type -->
          <div>
            <label for="wingletType" class="block text-sm font-medium text-gray-700 mb-1">
              Winglet Type
            </label>
            <select 
              id="wingletType" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
            >
              <option value="single">Standard Winglet</option>
              <option value="split" selected>Split Scimitar Winglet</option>
              <option value="blended">Blended Winglet</option>
              <option value="raked">Raked Winglet</option>
              <option value="sharklet">Sharklet</option>
            </select>
          </div>
          
          <!-- Main winglet angle -->
          <div>
            <label for="wingletAngle" class="block text-sm font-medium text-gray-700 mb-1">
              Winglet Angle (degrees)
            </label>
            <div class="flex items-center">
              <input 
                type="range" 
                id="wingletAngle" 
                min="-90" 
                max="90" 
                value="75" 
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <span id="wingletAngleValue" class="ml-3 w-12 text-center">75°</span>
            </div>
          </div>
          
          <!-- Secondary winglet angle (for split scimitar) -->
          <div>
            <label for="secondaryWingletAngle" class="block text-sm font-medium text-gray-700 mb-1">
              Secondary Winglet Angle (degrees)
            </label>
            <div class="flex items-center">
              <input 
                type="range" 
                id="secondaryWingletAngle" 
                min="0" 
                max="90" 
                value="60"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <span id="secondaryWingletAngleValue" class="ml-3 w-12 text-center">60°</span>
            </div>
          </div>
          
          <!-- Winglet height -->
          <div>
            <label for="wingletHeight" class="block text-sm font-medium text-gray-700 mb-1">
              Winglet Height (% wingspan)
            </label>
            <div class="flex items-center">
              <input 
                type="range" 
                id="wingletHeight" 
                min="1" 
                max="15" 
                value="8" 
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <span id="wingletHeightValue" class="ml-3 w-12 text-center">8%</span>
            </div>
          </div>
          
          <!-- Toe angle (advanced option) -->
          <div>
            <label for="toeAngle" class="block text-sm font-medium text-gray-700 mb-1">
              Toe Angle (degrees)
            </label>
            <div class="flex items-center">
              <input 
                type="range" 
                id="toeAngle" 
                min="-10" 
                max="10" 
                value="2" 
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <span id="toeAngleValue" class="ml-3 w-12 text-center">2°</span>
            </div>
          </div>
          
          <!-- Render settings -->
          <div>
            <div class="flex items-center space-x-4">
              <div class="flex items-center">
                <input 
                  type="checkbox" 
                  id="showFlow" 
                  class="h-4 w-4 text-blue-600 border-gray-300 rounded"
                />
                <label for="showFlow" class="ml-2 block text-sm font-medium text-gray-700">
                  Show Flow Visualization
                </label>
              </div>
              
              <div class="flex items-center">
                <input 
                  type="checkbox" 
                  id="showWireframe" 
                  class="h-4 w-4 text-blue-600 border-gray-300 rounded"
                />
                <label for="showWireframe" class="ml-2 block text-sm font-medium text-gray-700">
                  Wireframe
                </label>
              </div>
            </div>
          </div>
          
          <div class="mt-4 pt-4 border-t border-gray-200">
            <button id="updateWinglet" class="w-full bg-blue-600 text-white py-2 rounded text-sm font-medium hover:bg-blue-700">
              Update Winglet
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Performance Impact -->
    <div class="mt-6">
      <h3 class="text-sm font-medium text-gray-700 mb-2">Estimated Performance Impact</h3>
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <div class="text-gray-500">Drag Reduction</div>
            <div id="dragReduction" class="font-medium text-blue-600">4.8%</div>
          </div>
          <div>
            <div class="text-gray-500">Efficiency Gain</div>
            <div id="efficiencyGain" class="font-medium text-blue-600">3.2%</div>
          </div>
          <div>
            <div class="text-gray-500">Range Increase</div>
            <div id="rangeIncrease" class="font-medium text-blue-600">5.1%</div>
          </div>
          <div>
            <div class="text-gray-500">Fuel Savings</div>
            <div id="fuelSavings" class="font-medium text-blue-600">2.9%</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Simple UI updates for sliders
  document.addEventListener('DOMContentLoaded', function() {
    // Update angle display when sliders change
    document.getElementById('wingletAngle').addEventListener('input', function() {
      document.getElementById('wingletAngleValue').textContent = this.value + '°';
    });
    
    document.getElementById('secondaryWingletAngle').addEventListener('input', function() {
      document.getElementById('secondaryWingletAngleValue').textContent = this.value + '°';
    });
    
    document.getElementById('wingletHeight').addEventListener('input', function() {
      document.getElementById('wingletHeightValue').textContent = this.value + '%';
    });
    
    document.getElementById('toeAngle').addEventListener('input', function() {
      document.getElementById('toeAngleValue').textContent = this.value + '°';
    });
    
    // Show/hide secondary winglet angle based on selection
    document.getElementById('wingletType').addEventListener('change', function() {
      var secondaryAngleDiv = document.getElementById('secondaryWingletAngle').parentElement.parentElement;
      if (this.value === 'split') {
        secondaryAngleDiv.style.opacity = '1';
        document.getElementById('secondaryWingletAngle').disabled = false;
      } else {
        secondaryAngleDiv.style.opacity = '0.5';
        document.getElementById('secondaryWingletAngle').disabled = true;
      }
    });
    
    // Button click simulation
    document.getElementById('updateWinglet').addEventListener('click', function() {
      this.textContent = 'Updated!';
      setTimeout(() => {
        this.textContent = 'Update Winglet';
      }, 1500);
      
      // Update performance metrics
      updatePerformanceImpact();
    });
    
    // Update performance metrics randomly to simulate changes
    function updatePerformanceImpact() {
      // Get current parameter values
      var type = document.getElementById('wingletType').value;
      var angle = parseInt(document.getElementById('wingletAngle').value);
      var height = parseInt(document.getElementById('wingletHeight').value);
      
      // Base factors
      var typeFactor = 1.0;
      switch (type) {
        case 'split': typeFactor = 1.5; break;
        case 'blended': typeFactor = 1.3; break;
        case 'sharklet': typeFactor = 1.28; break;
        case 'raked': typeFactor = 1.15; break;
        default: typeFactor = 1.0;
      }
      
      // Optimal angle is 75°
      var angleFactor = 1 - Math.abs(Math.abs(angle) - 75) / 75;
      
      // Height factor (3-8% wingspan is optimal)
      var heightFactor = Math.min(height / 6, 1.8);
      
      // Combined effect
      var totalFactor = typeFactor * angleFactor * heightFactor;
      
      // Add some randomization
      var randomFactor = 0.95 + Math.random() * 0.1;
      
      // Update display
      document.getElementById('dragReduction').textContent = 
        (totalFactor * 5.2 * randomFactor).toFixed(1) + '%';
      document.getElementById('efficiencyGain').textContent = 
        (totalFactor * 3.8 * randomFactor).toFixed(1) + '%';
      document.getElementById('rangeIncrease').textContent = 
        (totalFactor * 5.5 * randomFactor).toFixed(1) + '%';
      document.getElementById('fuelSavings').textContent = 
        (totalFactor * 3.2 * randomFactor).toFixed(1) + '%';
    }
    
    // Run once to set initial state of secondary angle visibility
    document.getElementById('wingletType').dispatchEvent(new Event('change'));
    
    // Add event listeners to inputs for live updates
    document.querySelectorAll('#wingletType, #wingletAngle, #wingletHeight, #toeAngle, #secondaryWingletAngle, #showFlow, #showWireframe')
      .forEach(input => {
        input.addEventListener('change', updatePerformanceImpact);
        if (input.type === 'range') {
          input.addEventListener('input', updatePerformanceImpact);
        }
      });
  });
</script>

<!-- Load Three.js separately if/when needed -->
<!-- 
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/controls/OrbitControls.js"></script>
-->
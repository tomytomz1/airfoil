---
import type { Airfoil } from '../../types';

interface Props {
  airfoil: Airfoil;
}

const { airfoil } = Astro.props;

function getAirfoilViewBox(coords) {
  if (!coords || coords.length === 0) return '0 0 1 0.2';
  const xs = coords.map(([x, y]) => x);
  const ys = coords.map(([x, y]) => y);
  const minX = Math.min(...xs), maxX = Math.max(...xs);
  const minY = Math.min(...ys), maxY = Math.max(...ys);
  const padX = (maxX - minX) * 0.05;
  const padY = (maxY - minY) * 0.15;
  return `${minX - padX} ${minY - padY} ${(maxX - minX) + 2 * padX} ${(maxY - minY) + 2 * padY}`;
}

function getPolylinePoints(coords) {
  if (!coords || coords.length === 0) return '';
  const ys = coords.map(([x, y]) => y);
  const minY = Math.min(...ys), maxY = Math.max(...ys);
  return coords.map(([x, y]) => `${x},${maxY + minY - y}`).join(' ');
}

function getSmoothPath(coords) {
  if (!coords || coords.length < 2) return '';
  const ys = coords.map(([x, y]) => y);
  const minY = Math.min(...ys), maxY = Math.max(...ys);
  // Flip Y for SVG
  const pts = coords.map(([x, y]) => [x, maxY + minY - y]);
  let d = `M ${pts[0][0]},${pts[0][1]}`;
  for (let i = 0; i < pts.length - 1; i++) {
    const p0 = pts[i === 0 ? i : i - 1];
    const p1 = pts[i];
    const p2 = pts[i + 1];
    const p3 = pts[i + 2] || p2;
    // Catmull-Rom to Bezier conversion
    const cp1x = p1[0] + (p2[0] - p0[0]) / 6;
    const cp1y = p1[1] + (p2[1] - p0[1]) / 6;
    const cp2x = p2[0] - (p3[0] - p1[0]) / 6;
    const cp2y = p2[1] - (p3[1] - p1[1]) / 6;
    d += ` C ${cp1x},${cp1y} ${cp2x},${cp2y} ${p2[0]},${p2[1]}`;
  }
  return d;
}
---

<div 
  class="airfoil-card bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow duration-200 flex flex-col" 
  data-id={airfoil.id} 
  data-name={airfoil.name} 
  data-description={airfoil.description || ''}
  data-camber={typeof airfoil.camber === 'number' ? airfoil.camber : 0}
  data-thickness={typeof airfoil.thickness === 'number' ? airfoil.thickness : 0}
>
  <div class="p-4 flex-1 flex flex-col">
    <div class="flex justify-between items-start">
      <div>
        <h3 class="text-lg sm:text-base md:text-lg font-medium text-gray-900">{airfoil.name}</h3>
        {airfoil.coordinates && airfoil.coordinates.length > 0 && (
          <div class="relative">
            <svg
              viewBox={getAirfoilViewBox(airfoil.coordinates)}
              width="100%"
              height="80"
              style="margin: 0.5rem 0;"
              preserveAspectRatio="xMidYMid meet"
              class="airfoil-preview"
              data-coordinates={JSON.stringify(airfoil.coordinates)}
            >
              <polyline
                points={getPolylinePoints(airfoil.coordinates)}
                fill="none"
                stroke="#2563eb"
                stroke-width="0.008"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </div>
        )}
        <p class="text-sm sm:text-xs md:text-sm text-gray-600">{airfoil.description || 'No description available'}</p>
      </div>
      <button 
        class="favorite-btn text-gray-400 hover:text-red-500 focus:outline-none rounded-full p-1" 
        data-id={airfoil.id}
        aria-label={`Add ${airfoil.name} to favorites`}
        style="box-shadow: none; border: none;"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        </svg>
      </button>
    </div>
    
    <div class="mt-3 border-b border-gray-200 pb-3"></div>
    
    <div class="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2 min-w-0">
      <div>
        <h4 class="text-xs sm:text-[11px] font-medium text-gray-500 uppercase">Quick Stats</h4>
        <div class="grid grid-cols-2 gap-x-2 gap-y-2 mt-1">
          <div>
            <div class="text-xs text-gray-700">Camber</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.camber || '--'}</div>
          </div>
          <div>
            <div class="text-xs text-gray-700">Thickness</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.thickness || '--'}</div>
          </div>
          <div>
            <div class="text-xs text-gray-700">Re Range</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.reynoldsRange || '--'}</div>
          </div>
        </div>
      </div>
      <div>
        <h4 class="text-xs sm:text-[11px] font-medium text-gray-500 uppercase">Performance</h4>
        <div class="grid grid-cols-2 gap-x-2 gap-y-2 mt-1">
          <div>
            <div class="text-xs text-gray-700">Max Cl/Cd</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.maxLiftDragRatio || '--'}</div>
          </div>
          <div>
            <div class="text-xs text-gray-700">Stall Angle</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.stallAngle || '--'}</div>
          </div>
          <div>
            <div class="text-xs text-gray-700">Cm</div>
            <div class="text-base font-semibold text-gray-900 pl-1">{airfoil.momentCoefficient || '--'}</div>
          </div>
        </div>
      </div>
    </div>
    <footer class="mt-auto">
      <div class="mt-3 flex flex-nowrap gap-x-2">
        <button 
          class="compare-btn flex-1 bg-gray-100 text-gray-700 py-2 px-3 sm:py-1.5 sm:px-2 text-sm sm:text-xs rounded font-medium flex justify-center items-center hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 whitespace-nowrap" 
          data-id={airfoil.id} 
          data-name={airfoil.name}
          aria-label={`Add ${airfoil.name} to comparison`}
          data-compare-state="unselected"
        >
          <svg class="w-4 h-4 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          Compare
        </button>
        <a 
          href={`/airfoil/${airfoil.id}`} 
          class="flex-1 bg-blue-600 text-white py-2 px-3 sm:py-1.5 sm:px-2 text-sm sm:text-xs rounded font-medium flex justify-center items-center hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 whitespace-nowrap"
          aria-label={`View details for ${airfoil.name}`}
        >
          <svg class="w-4 h-4 sm:w-3 sm:h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Details
        </a>
      </div>
      <div class="mt-4 bg-blue-50 px-4 py-2 text-xs text-blue-800">
        {airfoil.applications ? airfoil.applications.join(', ') : 'General purpose'}
      </div>
    </footer>
  </div>
</div>

<script>
function waitForStorage(callback) {
  if (window.storage) {
    callback();
  } else {
    setTimeout(() => waitForStorage(callback), 50);
  }
}

function updateFavoriteIcon(btn, isFav) {
  const svg = btn.querySelector('svg');
  if (svg) {
    svg.setAttribute('fill', isFav ? 'red' : 'none');
    btn.classList.toggle('text-red-500', isFav);
    btn.classList.toggle('text-gray-400', !isFav);
  }
}

function updateFavoritesSidebar() {
  const favorites = window.storage.get('favorites');
  const favoritesList = document.getElementById('favorites');
  if (favoritesList) {
    favoritesList.innerHTML = '';
    if (favorites.length === 0) {
      favoritesList.innerHTML = '<li class="pl-2 text-gray-700">No favorites yet.</li>';
    } else {
      favorites.forEach(airfoil => {
        favoritesList.innerHTML += `<li class='pl-2 text-gray-700'>${airfoil.name}</li>`;
      });
    }
  }
}

// Initialize favorite buttons and zoom overlay
document.addEventListener('DOMContentLoaded', () => {
  waitForStorage(() => {
    document.querySelectorAll('.favorite-btn').forEach(btn => {
      const id = btn.getAttribute('data-id');
      const isFav = window.storage.isFavorite(id);
      updateFavoriteIcon(btn, isFav);
      
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        const card = btn.closest('.airfoil-card');
        const name = card?.getAttribute('data-name') || '';
        const description = card?.getAttribute('data-description') || '';
        const airfoil = { id, name, description };
        const newFav = window.storage.toggleFavorite(airfoil);
        updateFavoriteIcon(btn, newFav);
        updateFavoritesSidebar();
      });
    });
    
    updateFavoritesSidebar();

    // Highlight compare button if selected
    function updateCompareButtons() {
      const compareIds = new Set((window.comparisonManager && window.comparisonManager.comparisonItems) ? Array.from(window.comparisonManager.comparisonItems) : []);
      document.querySelectorAll('.compare-btn').forEach(btn => {
        const id = btn.getAttribute('data-id');
        if (compareIds.has(id)) {
          btn.classList.add('compare-selected');
          btn.setAttribute('data-compare-state', 'selected');
        } else {
          btn.classList.remove('compare-selected');
          btn.setAttribute('data-compare-state', 'unselected');
        }
      });
    }
    // Initial update
    updateCompareButtons();
    // Listen for comparison changes
    if (window.comparisonManager) {
      const origUpdateUI = window.comparisonManager.updateUI.bind(window.comparisonManager);
      window.comparisonManager.updateUI = function() {
        origUpdateUI();
        updateCompareButtons();
      };
    }
  });

  // Initialize zoom overlay
  document.querySelectorAll('.airfoil-preview').forEach(preview => {
    const overlay = preview.parentElement.querySelector('.zoom-overlay');
    const backdrop = preview.parentElement.querySelector('.zoom-backdrop');
    if (!overlay || !backdrop) return;

    let timeoutId;

    function showZoom() {
      clearTimeout(timeoutId);
      const rect = preview.getBoundingClientRect();
      overlay.style.display = 'block';
      backdrop.style.display = 'block';
      overlay.classList.remove('hidden');
      backdrop.classList.remove('hidden');
      overlay.style.top = `${rect.top}px`;
      overlay.style.left = `${rect.left}px`;

      // Constrain overlay to main content area
      const overlayWidth = 600; // SVG width
      const overlayHeight = 400; // SVG height
      const padding = 40; // extra margin from edge
      let left = rect.left;
      let top = rect.top;
      // Find main content container
      const container = document.querySelector('.max-w-7xl.mx-auto');
      let bounds;
      if (container) {
        bounds = container.getBoundingClientRect();
      } else {
        bounds = { left: 0, top: 0, right: window.innerWidth, bottom: window.innerHeight, width: window.innerWidth, height: window.innerHeight };
      }
      // Clamp left/right
      if (left + overlayWidth > bounds.right - padding) {
        left = bounds.right - overlayWidth - padding;
      }
      if (left < bounds.left + padding) {
        left = bounds.left + padding;
      }
      // Clamp top/bottom
      if (top + overlayHeight > bounds.bottom - padding) {
        top = bounds.bottom - overlayHeight - padding;
      }
      if (top < bounds.top + padding) {
        top = bounds.top + padding;
      }
      overlay.style.left = `${left}px`;
      overlay.style.top = `${top}px`;
    }

    function hideZoom() {
      overlay.classList.add('hidden');
      backdrop.classList.add('hidden');
      timeoutId = setTimeout(() => {
        overlay.style.display = 'none';
        backdrop.style.display = 'none';
      }, 100);
    }

    preview.addEventListener('mouseenter', showZoom);
    preview.addEventListener('mouseleave', hideZoom);
    overlay.addEventListener('mouseenter', () => clearTimeout(timeoutId));
    overlay.addEventListener('mouseleave', hideZoom);
    backdrop.addEventListener('mouseenter', () => {
      overlay.classList.add('hidden');
      backdrop.classList.add('hidden');
      overlay.style.display = 'none';
      backdrop.style.display = 'none';
    });
  });
});
</script>

<style>
.compare-btn.compare-selected {
  background-color: #374151 !important; /* Tailwind gray-700 */
  color: #fff !important;
  border: none;
}
</style> 